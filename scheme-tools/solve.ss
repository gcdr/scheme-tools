#!r6rs

;; If the equations are available all at once, use solve-eqns:

;; (solve-eqns '((= (+ (* .5 x) (* .2 y)) 1.3)
;;               (= (+ (* .12 x) (* .83 y)) 4.3)))


;; If they are generated by some procedure, use solve (preferable):

;; (define eqn-generator
;;   (let ([eqn '(= x 1.23)])
;;     (lambda ()
;;       (let ([y eqn])
;;         (set! eqn '())
;;         y))))

;; (solve eqn-generator)

(library

 (scheme-tools solve)

 (export solve
         solve-eqns)

 (import (rnrs)
         (scheme-tools py-pickle))

 (define solver "linsolve")

 (define (strings->symbols sol)
   (map (lambda (kv)
          (cons (string->symbol (car kv))
                (cadr kv)))
        sol))

 (define (solve eqn-generator)
   (let ([port (open-py-ports solver)])
     (let loop ([eqn (eqn-generator)])
       (if (null? eqn)
           (begin
             (py-pickle port 'solve)
             (strings->symbols (py-unpickle port)))
           (begin
             (py-pickle port eqn)
             (loop (eqn-generator)))))))

 (define (solve-eqns eqns)
   (let ([port (open-py-ports solver)])
     (for-each (lambda (eqn) (py-pickle port eqn))
               eqns)
     (py-pickle port 'solve)
     (strings->symbols (py-unpickle port))))

 )